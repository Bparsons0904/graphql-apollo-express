{"version":3,"sources":["../../src/resolvers/authorization.js"],"names":["isAuthenticated","parent","args","me","skip","ForbiddenError","isAdmin","role","isMessageOwner","id","models","message","Message","findByPk","raw","userId"],"mappings":";;;;;;;AACA;;AAEA;;AAHA;AAEA;AAGA;AACO,MAAMA,eAAe,GAAG,CAACC,MAAD,EAASC,IAAT,EAAe;AAAEC,EAAAA;AAAF,CAAf,KAC7BA,EAAE,GAAGC,sBAAH,GAAU,IAAIC,4BAAJ,CAAmB,4BAAnB,CADP,C,CAGP;;;;AACO,MAAMC,OAAO,GAAG,wCACrBN,eADqB,EAErB,CAACC,MAAD,EAASC,IAAT,EAAe;AAAEC,EAAAA,EAAE,EAAE;AAAEI,IAAAA;AAAF;AAAN,CAAf,KACEA,IAAI,KAAK,OAAT,GAAmBH,sBAAnB,GAA0B,IAAIC,4BAAJ,CAAmB,0BAAnB,CAHP,CAAhB,C,CAMP;;;;AACO,MAAMG,cAAc,GAAG,OAAOP,MAAP,EAAe;AAAEQ,EAAAA;AAAF,CAAf,EAAuB;AAAEC,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAvB,KAA0C;AACtE,QAAMQ,OAAO,GAAG,MAAMD,MAAM,CAACE,OAAP,CAAeC,QAAf,CAAwBJ,EAAxB,EAA4B;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAA5B,CAAtB;;AAEA,MAAIH,OAAO,CAACI,MAAR,KAAmBZ,EAAE,CAACM,EAA1B,EAA8B;AAC5B,UAAM,IAAIJ,4BAAJ,CAAmB,6BAAnB,CAAN;AACD;;AAED,SAAOD,sBAAP;AACD,CARM","sourcesContent":["// Apollo error handling\r\nimport { ForbiddenError } from \"apollo-server\";\r\n// Allow for authorizations and null returns\r\nimport { combineResolvers, skip } from \"graphql-resolvers\";\r\n\r\n// Verify user is authenticated\r\nexport const isAuthenticated = (parent, args, { me }) =>\r\n  me ? skip : new ForbiddenError(\"Not authenticated as user.\");\r\n\r\n// Verify is user is admin\r\nexport const isAdmin = combineResolvers(\r\n  isAuthenticated,\r\n  (parent, args, { me: { role } }) =>\r\n    role === \"ADMIN\" ? skip : new ForbiddenError(\"Not authorized as admin.\")\r\n);\r\n\r\n// Check if message is owned by user\r\nexport const isMessageOwner = async (parent, { id }, { models, me }) => {\r\n  const message = await models.Message.findByPk(id, { raw: true });\r\n\r\n  if (message.userId !== me.id) {\r\n    throw new ForbiddenError(\"Not authenticated as owner.\");\r\n  }\r\n\r\n  return skip;\r\n};\r\n"],"file":"authorization.js"}