{"version":3,"sources":["../../src/resolvers/user.js"],"names":["createToken","user","secret","expiresIn","id","email","username","role","jwt","sign","Query","users","parent","args","models","User","findAll","findByPk","me","Mutation","signUp","password","create","token","signIn","login","findByLogin","UserInputError","isValid","validatePassword","AuthenticationError","deleteUser","isAdmin","destroy","where","messages","Message","userId"],"mappings":"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","sourcesContent":["// Generate token\r\nimport jwt from \"jsonwebtoken\";\r\n// Allow for authentications\r\nimport { combineResolvers } from \"graphql-resolvers\";\r\n// Apollo error handling\r\nimport { AuthenticationError, UserInputError } from \"apollo-server\";\r\n// Check if user has admin role\r\nimport { isAdmin } from \"./authorization\";\r\n\r\n// Generate token\r\nconst createToken = async (user, secret, expiresIn) => {\r\n  const { id, email, username, role } = user;\r\n  return await jwt.sign({ id, email, username, role }, secret, {\r\n    expiresIn,\r\n  });\r\n};\r\n\r\nexport default {\r\n  Query: {\r\n    // Multiple Users\r\n    users: async (parent, args, { models }) => {\r\n      return await models.User.findAll();\r\n    },\r\n    // Single User\r\n    user: async (parent, { id }, { models }) => {\r\n      return await models.User.findByPk(id);\r\n    },\r\n    // Current User\r\n    me: async (parent, args, { models, me }) => {\r\n      if (!me) {\r\n        return null;\r\n      }\r\n      return await models.User.findByPk(me.id);\r\n    },\r\n  },\r\n  Mutation: {\r\n    // Add user with hashed password\r\n    signUp: async (\r\n      parent,\r\n      { username, email, password },\r\n      { models, secret }\r\n    ) => {\r\n      const user = await models.User.create({\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      return { token: createToken(user, secret, \"30m\") };\r\n    },\r\n    // Sign in user based on user input.\r\n    signIn: async (\r\n      parent,\r\n      // Login can be username or email\r\n      { login, password },\r\n      { models, secret }\r\n    ) => {\r\n      const user = await models.User.findByLogin(login);\r\n      // Throw user input error if no user found\r\n      if (!user) {\r\n        throw new UserInputError(\"No user found with this login credentials.\");\r\n      }\r\n\r\n      // Boolean variable if password if valid\r\n      const isValid = await user.validatePassword(password);\r\n\r\n      // If password is not valid, through authentication error\r\n      if (!isValid) {\r\n        throw new AuthenticationError(\"Invalid password.\");\r\n      }\r\n      // Return token for client\r\n      return { token: createToken(user, secret, \"30m\") };\r\n    },\r\n    // Delete a user\r\n    deleteUser: combineResolvers(\r\n      isAdmin,\r\n      async (parent, { id }, { models }) => {\r\n        return await models.User.destroy({\r\n          where: { id },\r\n        });\r\n      }\r\n    ),\r\n  },\r\n  // Define User message type return value\r\n  User: {\r\n    messages: async (user, args, { models }) => {\r\n      return await models.Message.findAll({\r\n        where: {\r\n          userId: user.id,\r\n        },\r\n      });\r\n    },\r\n  },\r\n};\r\n"],"file":"user.js"}