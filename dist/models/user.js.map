{"version":3,"sources":["../../src/models/user.js"],"names":["user","sequelize","DataTypes","User","define","username","type","STRING","unique","allowNull","validate","notEmpty","args","msg","len","email","isEmail","password","role","associate","models","hasMany","Message","onDelete","findByLogin","login","findOne","where","beforeCreate","generatePasswordHash","prototype","saltRounds","bcrypt","hash","validatePassword","compare"],"mappings":"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","sourcesContent":["// Password hash crypto\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst user = (sequelize, DataTypes) => {\r\n  const User = sequelize.define(\"user\", {\r\n    username: {\r\n      type: DataTypes.STRING,\r\n      unique: true,\r\n      allowNull: false,\r\n      validate: {\r\n        notEmpty: {\r\n          args: true,\r\n          msg: \"Username required.\",\r\n        },\r\n        len: {\r\n          args: [5, 20],\r\n          msg: \"Username length of 5-20 required.\",\r\n        },\r\n      },\r\n    },\r\n    email: {\r\n      type: DataTypes.STRING,\r\n      unique: true,\r\n      allowNull: false,\r\n      validate: {\r\n        notEmpty: true,\r\n        isEmail: true,\r\n      },\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      validate: {\r\n        notEmpty: true,\r\n        len: [7, 42],\r\n      },\r\n    },\r\n    role: {\r\n      type: DataTypes.STRING,\r\n    },\r\n  });\r\n\r\n  // Delete all user messages\r\n  User.associate = (models) => {\r\n    User.hasMany(models.Message, { onDelete: \"CASCADE\" });\r\n  };\r\n\r\n  // Define user by login value\r\n  User.findByLogin = async (login) => {\r\n    // Attempt to find user based on username\r\n    let user = await User.findOne({\r\n      where: { username: login },\r\n    });\r\n\r\n    // If user not found my username, find by email\r\n    if (!user) {\r\n      user = await User.findOne({\r\n        where: { email: login },\r\n      });\r\n    }\r\n\r\n    return user;\r\n  };\r\n\r\n  // Create hash of inputted password\r\n  User.beforeCreate(async (user) => {\r\n    user.password = await user.generatePasswordHash();\r\n  });\r\n\r\n  // Generate password hash using bcrypt\r\n  User.prototype.generatePasswordHash = async function () {\r\n    const saltRounds = 10;\r\n    return await bcrypt.hash(this.password, saltRounds);\r\n  };\r\n\r\n  // Validate stored user password with user input\r\n  User.prototype.validatePassword = async function (password) {\r\n    return await bcrypt.compare(password, this.password);\r\n  };\r\n\r\n  return User;\r\n};\r\n\r\nexport default user;\r\n"],"file":"user.js"}